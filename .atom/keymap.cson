# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#customizing_keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on macOS and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'html body .results-view':
  # move between results in project search view
  'k': 'core:move-up'
  'j': 'core:move-down'

'html body atom-workspace.workspace':
  # move between panes
  'ctrl-h': 'pane:show-previous-item'
  'ctrl-l': 'pane:show-next-item'
  'ctrl-tab ^ctrl': 'unset!'
  'ctrl-tab': 'pane:show-next-item'
  'ctrl-shift-tab ^ctrl': 'unset!'
  'ctrl-shift-tab': 'pane:show-previous-item'
   # move panes
  'ctrl-shift-h': 'pane:move-item-left'
  'ctrl-shift-l': 'pane:move-item-right'
  # toggle dev console like in chrome
  'alt-cmd-j': 'window:toggle-dev-tools'
  # reload window like in chrome
  'cmd-r': 'window:reload'
  # toggle fuzzy finder
  'cmd-t': 'fuzzy-finder:toggle-file-finder'
  # add and remove project from workspace
  'ctrl-+': 'project-plus:open'
  'ctrl--': 'project-plus:remove'
  'cmd-p': 'project-manager:list-projects'

'atom-text-editor':
  # toggle command palette
  'shift-cmd-space': 'command-palette:toggle'
  # jump in cursor position history
  'ctrl-o': 'cursor-history:next'
  'ctrl-i': 'cursor-history:prev'
  # move between folds
  'ctrl-k': 'vim-fold-one:move-up'
  'ctrl-j': 'vim-fold-one:move-down'
  'ctrl-f': 'vim-fold-one:toggle-current-fold'
  'ctrl-c': 'vim-fold-one:toggle-all-folds'
  # jump to golang definition of golang statements under the cursor
  'cmd-g': 'golang:godef'

'atom-text-editor.autocomplete-active':
  # move inside autocomplete suggestions
  'ctrl-k': 'autocomplete-plus:move-up'
  'ctrl-j': 'autocomplete-plus:move-down'

'atom-text-editor.vim-mode-plus:not(.insert-mode)':
  # format any block in visual mode
  'g q': 'autoflow:reflow-selection'

'.platform-darwin':
  'cmd-\\': 'tree-view:reveal-active-file'
